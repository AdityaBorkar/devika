import { type Cycle, type CycleProgress, CycleStatus } from "./types";

const generateProgress = (tasks: { status: string }[]): CycleProgress => {
	const totalTasks = tasks.length;
	const completedTasks = tasks.filter((task) => task.status === "Done").length;

	return {
		totalTasks,
		completedTasks,
		percentComplete:
			totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0,
		tasksStatus: {
			todo: tasks.filter((task) => task.status === "Todo").length,
			inProgress: tasks.filter((task) => task.status === "In Progress").length,
			done: completedTasks,
			blocked: tasks.filter((task) => task.status === "Blocked").length,
		},
	};
};

export const MOCK_CYCLES: Cycle[] = [
	{
		id: "1",
		name: "Authentication System",
		startDate: "2023-10-01",
		endDate: "2023-10-15",
		status: "Completed",
		description: "Implement user authentication with OAuth providers",
		tasks: [
			{
				id: "1-1",
				title: "Set up OAuth providers",
				status: "Done",
				assignee: "Sarah",
				estimatedHours: 4,
				actualHours: 3,
			},
			{
				id: "1-2",
				title: "Create login page",
				status: "Done",
				assignee: "Mark",
				estimatedHours: 6,
				actualHours: 5,
			},
			{
				id: "1-3",
				title: "Implement session management",
				status: "Done",
				assignee: "Sarah",
				estimatedHours: 8,
				actualHours: 10,
			},
		],
		tokensConsumed: 14500,
		additionalInstructions: "Support Google and GitHub OAuth",
		integrationTests: ["Auth flow test", "Session expiry test"],
		writeTests: true,
		writeDocumentation: true,
		changelog: "Added authentication system with Google and GitHub OAuth",
		progress: generateProgress([
			{ status: "Done" },
			{ status: "Done" },
			{ status: "Done" },
		]),
		roadblocks: [],
	},
	{
		id: "2",
		name: "Data Visualization Dashboard",
		startDate: "2023-10-16",
		endDate: "2023-10-30",
		status: "In Progress",
		description: "Create dashboard with charts for user analytics",
		tasks: [
			{
				id: "2-1",
				title: "Design dashboard layout",
				status: "Done",
				assignee: "Lisa",
				estimatedHours: 5,
				actualHours: 6,
			},
			{
				id: "2-2",
				title: "Implement data fetching",
				status: "In Progress",
				assignee: "John",
				estimatedHours: 8,
				actualHours: 4,
			},
			{
				id: "2-3",
				title: "Create chart components",
				status: "In Progress",
				assignee: "Lisa",
				estimatedHours: 10,
				actualHours: 5,
			},
			{
				id: "2-4",
				title: "Add filtering options",
				status: "Todo",
				assignee: "John",
				estimatedHours: 6,
			},
		],
		tokensConsumed: 22300,
		additionalInstructions: "Use Recharts for visualization",
		integrationTests: ["Data loading test"],
		writeTests: true,
		writeDocumentation: false,
		progress: generateProgress([
			{ status: "Done" },
			{ status: "In Progress" },
			{ status: "In Progress" },
			{ status: "Todo" },
		]),
		roadblocks: [
			{
				id: "rb-1",
				description: "API rate limiting affecting data fetching",
				status: "Active",
				createdAt: "2023-10-18",
			},
		],
	},
	{
		id: "3",
		name: "Performance Optimization",
		startDate: "2023-11-01",
		endDate: "2023-11-10",
		status: "Not Started",
		description: "Optimize application performance and loading times",
		tasks: [
			{
				id: "3-1",
				title: "Analyze bundle size",
				status: "Todo",
				assignee: "Alex",
				estimatedHours: 4,
			},
			{
				id: "3-2",
				title: "Implement code splitting",
				status: "Todo",
				assignee: "Maya",
				estimatedHours: 8,
			},
			{
				id: "3-3",
				title: "Optimize images",
				status: "Todo",
				assignee: "Alex",
				estimatedHours: 6,
			},
			{
				id: "3-4",
				title: "Add loading skeletons",
				status: "Todo",
				assignee: "Maya",
				estimatedHours: 5,
			},
		],
		tokensConsumed: 0,
		writeTests: false,
		writeDocumentation: true,
		progress: generateProgress([
			{ status: "Todo" },
			{ status: "Todo" },
			{ status: "Todo" },
			{ status: "Todo" },
		]),
		roadblocks: [],
	},
	{
		id: "4",
		name: "User Management System",
		startDate: "2023-10-10",
		endDate: "2023-10-20",
		status: "Cancelled",
		description: "Create user management interface for admins",
		tasks: [
			{
				id: "4-1",
				title: "Design user management UI",
				status: "Done",
				assignee: "Raj",
				estimatedHours: 6,
				actualHours: 5,
			},
			{
				id: "4-2",
				title: "Implement user CRUD operations",
				status: "In Progress",
				assignee: "Emma",
				estimatedHours: 12,
				actualHours: 8,
			},
			{
				id: "4-3",
				title: "Add role-based permissions",
				status: "Blocked",
				assignee: "Raj",
				estimatedHours: 8,
			},
		],
		tokensConsumed: 8700,
		additionalInstructions: "Implement with RBAC patterns",
		writeTests: true,
		writeDocumentation: true,
		progress: generateProgress([
			{ status: "Done" },
			{ status: "In Progress" },
			{ status: "Blocked" },
		]),
		roadblocks: [
			{
				id: "rb-2",
				description: "Security requirements changed",
				status: "Active",
				createdAt: "2023-10-15",
			},
			{
				id: "rb-3",
				description: "Database connection issues",
				status: "Resolved",
				createdAt: "2023-10-12",
				resolvedAt: "2023-10-14",
			},
		],
	},
	{
		id: "5",
		name: "API Integration",
		startDate: "2023-11-15",
		endDate: "2023-11-30",
		status: "Not Started",
		description: "Integrate with third-party payment and shipping APIs",
		tasks: [
			{
				id: "5-1",
				title: "Set up payment gateway",
				status: "Todo",
				assignee: "Chen",
				estimatedHours: 10,
			},
			{
				id: "5-2",
				title: "Implement shipping calculator",
				status: "Todo",
				assignee: "Priya",
				estimatedHours: 8,
			},
			{
				id: "5-3",
				title: "Add tax calculation service",
				status: "Todo",
				assignee: "Chen",
				estimatedHours: 6,
			},
			{
				id: "5-4",
				title: "Create order confirmation flow",
				status: "Todo",
				assignee: "Priya",
				estimatedHours: 12,
			},
		],
		tokensConsumed: 0,
		additionalInstructions: "Use Stripe for payments, ShipEngine for shipping",
		integrationTests: [
			"Payment processing test",
			"Shipping calculation test",
			"Tax calculation test",
		],
		writeTests: true,
		writeDocumentation: true,
		progress: generateProgress([
			{ status: "Todo" },
			{ status: "Todo" },
			{ status: "Todo" },
			{ status: "Todo" },
		]),
		roadblocks: [],
	},
];
