---
description: 
globs: 
alwaysApply: false
---

# Rule Improvement Framework

- **Rule Organization:**
  - **Core Rules:** Base patterns for entire codebase
  - **Domain Rules:** Feature or domain-specific patterns
  - **Tech Rules:** Framework or library-specific patterns
  - **Process Rules:** Development workflow guidance

- **Self-Improvement Signals:**
  - Repeated explanations of same concepts
  - Common issues or questions from users
  - New patterns emerging in multiple files
  - Changes to development workflow

- **Improvement Process:**
  - **Identify:** Recognize patterns needing rules
  - **Validate:** Check multiple instances for consistency
  - **Create:** Write rule with examples from codebase
  - **Reference:** Link rule from related rules

- **Rule Creation Checklist:**
  - Does the rule apply to multiple files?
  - Is there a clear implementation pattern?
  - Does it address common questions/issues?
  - Are there explicit examples in the codebase?

- **Rule Quality Standards:**
  - Clear, specific and actionable guidance
  - Actual code examples from the project
  - Links to related rules and reference files
  - Both DO and DON'T examples when relevant

- **Keeping Rules Relevant:**
  - Update examples as implementation changes
  - Review rules after major refactors
  - Remove outdated patterns
  - Add notes for deprecated approaches

- **Rule Format Best Practices:**
  ```markdown
  # Rule Title

  - **Major Section:**
    - Detailed explanation
    - Specific requirements
  
  - **Code Examples:**
    ```typescript
    // ✅ DO: Good example
    const goodPattern = true;
    
    // ❌ DON'T: Bad example
    const badPattern = false;
    ```
  ```

- **Rules Review Checklist:**
  - Are examples current?
  - Do patterns still match actual code?
  - Are links working and relevant?
  - Is the rule still necessary?

Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for proper rule formatting and structure.
